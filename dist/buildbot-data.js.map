{"version":3,"sources":["bowerdeps.js","data.module.coffee","data.constant.coffee","classes/base.service.coffee","classes/build.service.coffee","classes/builder.service.coffee","classes/buildrequest.service.coffee","classes/buildset.service.coffee","classes/change.service.coffee","classes/changesource.service.coffee","classes/forcescheduler.service.coffee","classes/logs.service.coffee","classes/master.service.coffee","classes/properties.service.coffee","classes/scheduler.service.coffee","classes/sourcestamp.service.coffee","classes/step.service.coffee","classes/worker.service.coffee","services/dataUtils/dataUtils.service.coffee","services/data/data.service.coffee","services/socket/socket.service.coffee","services/socket/webSocketBackend.service.coffee","services/socket/websocket.service.coffee","services/rest/rest.service.coffee","services/stream/stream.service.coffee","services/data/collection/collection.service.coffee","services/data/collection/dataquery.service.coffee"],"names":[],"mappings":"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","file":"buildbot-data.js","sourcesContent":["BOWERDEPS = (typeof BOWERDEPS === 'undefined') ? {}: BOWERDEPS;","# Register new module\nclass App extends App\n    constructor: ->\n        return []","class Api extends Constant\n    constructor: -> return 'api/v2/'\n\nclass Endpoints extends Constant\n    constructor: ->\n        # Rootlinks\n        return [\n            'builders'\n            'builds'\n            'buildrequests'\n            'workers'\n            'buildsets'\n            'changes'\n            'changesources'\n            'masters'\n            'sourcestamps'\n            'schedulers'\n            'forceschedulers'\n        ]\n","class Base extends Factory\n    constructor: (dataService, socketService, dataUtilsService) ->\n        return class BaseInstance\n            constructor: (object, @_endpoint, childEndpoints = []) ->\n                if not angular.isString(@_endpoint)\n                    throw new TypeError(\"Parameter 'endpoint' must be a string, not #{typeof @endpoint}\")\n\n                @$accessor = null\n                # add object fields to the instance\n                @update(object)\n\n                # generate loadXXX functions\n                @constructor.generateFunctions(childEndpoints)\n\n                # get the id of the class type\n                classId = dataUtilsService.classId(@_endpoint)\n                @_id = @[classId]\n\n                # reset endpoint to base\n                if @_id?\n                    @_endpoint = dataUtilsService.type(@_endpoint)\n\n            setAccessor: (a) ->\n                @$accessor = a\n\n            update: (o) ->\n                angular.extend(this, o)\n\n            get: (args...) ->\n                dataService.get(@_endpoint, @_id, args...)\n\n            control: (method, params) ->\n                dataService.control(@_endpoint, @_id, method, params)\n\n            # generate endpoint functions for the class\n            @generateFunctions: (endpoints) ->\n                endpoints.forEach (e) =>\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    # adds loadXXX functions to the prototype\n                    this::[\"load#{E}\"] = (args...) ->\n                        return @[e] = @get(e, args...)\n\n                    # adds getXXX functions to the prototype\n                    this::[\"get#{E}\"] = (args...) ->\n                        [args, query] = dataUtilsService.splitOptions(args)\n                        if @$accessor\n                            query.subscribe ?= true\n                            query.accessor = @$accessor\n                        return @.get(e, args..., query)\n","class Build extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'changes'           # /changes\n                    'properties'        # /properties\n                    'steps'             # /steps/:name\n                                        # /steps/:stepid\n                ]\n\n                super(object, endpoint, endpoints)\n","class Builder extends Factory\n    constructor: (Base, dataService) ->\n        return class BuilderInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'builds'            # /builds/:buildid\n                    'buildrequests'     # /buildrequests/:buildrequestid\n                    'forceschedulers'   # /forceschedulers\n                    'workers'           # /workers/:workerid\n                                        # /workers/:name\n                    'masters'           # /masters/:masterid\n                ]\n\n                super(object, endpoint, endpoints)\n","class Buildrequest extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildrequestInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'builds'            # /builds\n                ]\n\n                super(object, endpoint, endpoints)\n","class Buildset extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildsetInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'properties'        # /properties\n                ]\n\n                super(object, endpoint, endpoints)\n","class Change extends Factory\n    constructor: (Base, dataService, dataUtilsService) ->\n        return class ChangeInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n                author = @author\n                if not @author?\n                    author = \"unknown\"\n\n                email = dataUtilsService.emailInString(author)\n                # Remove email from author string\n                if email\n                    if  author.split(' ').length > 1\n                        @author_name = author.replace(///\\s<#{email}>///, '')\n                        @author_email = email\n                    else\n                        @author_name = email.split(\"@\")[0]\n                        @author_email = email\n                else\n                    @author_name = author\n","class Changesource extends Factory\n    constructor: (dataService, Base) ->\n        return class ChangesourceInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Forcescheduler extends Factory\n    constructor: (Base, dataService) ->\n        return class ForceschedulerInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Log extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'chunks'           # /chunks\n                    'contents'\n                ]\n                super(object, endpoint, endpoints)\n","class Master extends Factory\n    constructor: (Base, dataService) ->\n        return class MasterInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'builders'          # /builders/:builderid\n                    'workers'           # /workers/:workerid\n                                        # /workers/:name\n                    'changesources'     # /changesources/:changesourceid\n                    'schedulers'        # /schedulers/:schedulerid\n                ]\n\n                super(object, endpoint, endpoints)\n","# damn grammar. I claim that properties singular is propertie\nclass Propertie extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint, [])\n","class Scheduler extends Factory\n    constructor: (Base, dataService) ->\n        return class SchedulerInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Sourcestamp extends Factory\n    constructor: (Base, dataService) ->\n        return class SourcestampInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'changes'           # /changes\n                ]\n\n                super(object, endpoint, endpoints)\n","class Step extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'logs'           # /logs\n                ]\n\n                super(object, endpoint, endpoints)\n","class Worker extends Factory\n    constructor: (Base, dataService) ->\n        return class WorkerInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class DataUtils extends Service\n    constructor: ->\n        return new class dataUtilsService\n            # capitalize first word\n            capitalize: (string) ->\n                string[0].toUpperCase() + string[1..].toLowerCase()\n\n            # returns the type of the endpoint\n            type: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # if the argument count is even, the last argument is an id\n                if a.length % 2 is 0 then a.pop()\n                type = a.pop()\n                if type == \"contents\"\n                    type = \"logchunks\"\n                return type\n            # singularize the type name\n            singularType: (arg) ->\n                @type(arg).replace(/s$/, '')\n\n            className: (arg) ->\n                @capitalize(@singularType(arg))\n\n            classId: (arg) ->\n                if @singularType(arg) == \"forcescheduler\"\n                    return \"name\"\n                if @singularType(arg) == \"buildset\"\n                    return \"bsid\"\n                @singularType(arg) + \"id\"\n\n            socketPath: (arg) ->\n                a = @copyOrSplit(arg)\n                # if the argument count is even, the last argument is an id\n                # Format of properties endpoint is an exception\n                # and needs to be properties/*, not properties/*/*\n                stars = ['*']\n                # is it odd?\n                if a.length % 2 is 1 and not arg.endsWith(\"/properties\") then stars.push('*')\n                a.concat(stars).join('/')\n\n            socketPathRE: (socketPath) ->\n                return new RegExp(\"^\" + socketPath.replace(/\\*/g, \"[^/]+\") + \"$\")\n\n            restPath: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                a.join('/')\n\n            endpointPath: (arg) ->\n                # if the argument count is even, the last argument is an id\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # is it even?\n                if a.length % 2 is 0 then a.pop()\n                a.join('/')\n\n            copyOrSplit: (arrayOrString) ->\n                if angular.isArray(arrayOrString)\n                    # return a copy\n                    arrayOrString[..]\n                else if angular.isString(arrayOrString)\n                    # split the string to get an array\n                    arrayOrString.split('/')\n                else\n                    throw new TypeError(\"Parameter 'arrayOrString' must be a array or a string, not #{typeof arrayOrString}\")\n\n            unWrap: (object, path) ->\n                object[@type(path)]\n\n            splitOptions: (args) ->\n                # keep defined arguments only\n                args = args.filter (e) -> e?\n\n                query = {} # default\n                # get the query parameters\n                [..., last] = args\n                subscribe = accessor = null\n\n                if angular.isObject(last)\n                    query = args.pop()\n\n                return [args, query]\n\n            parse: (object) ->\n                for k, v of object\n                    try\n                        object[k] = angular.fromJson(v)\n                    catch error then # ignore\n                return object\n\n            numberOrString: (str = null) ->\n                # if already a number\n                if angular.isNumber(str) then return str\n                # else parse string to integer\n                number = parseInt str, 10\n                if !isNaN(number) then number else str\n\n            emailInString: (string) ->\n                if not angular.isString(string)\n                    throw new TypeError(\"Parameter 'string' must be a string, not #{typeof string}\")\n                emailRegex = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/\n                try\n                    emailRegex.exec(string).pop() or ''\n                catch\n                    ''\n","class Data extends Provider\n    constructor: ->\n    # TODO caching\n    cache: false\n\n    ### @ngInject ###\n    $get: ($log, $injector, $q, restService, socketService, dataUtilsService, Collection, ENDPOINTS) ->\n        return new class DataService\n            self = null\n            constructor: ->\n                self = this\n                # setup socket listeners\n                #socketService.eventStream.onUnsubscribe = @unsubscribeListener\n                socketService.onclose = @socketCloseListener\n                # generate loadXXX functions for root endpoints\n                @constructor.generateEndpoints()\n\n            # the arguments are in this order: endpoint, id, child, id of child, query\n            get: (args...) ->\n\n                # get the query parameters\n                [args, query] = dataUtilsService.splitOptions(args)\n                subscribe = accessor = undefined\n\n                # subscribe for changes if 'subscribe' is true\n                subscribe = query.subscribe == true\n                accessor = query.accessor\n                if subscribe and not accessor\n                    $log.warn \"subscribe call should be done after DataService.open()\"\n                    $log.warn \"for maintaining trace of observers\"\n                    subscribe = false\n\n                # 'subscribe' is not part of the query\n                delete query.subscribe\n                delete query.accessor\n\n                restPath = dataUtilsService.restPath(args)\n                # up to date array, this will be returned\n                collection = new Collection(restPath, query, accessor)\n\n                if subscribe\n                    subscribePromise = collection.subscribe()\n                else\n                    subscribePromise = $q.resolve()\n\n                subscribePromise.then ->\n                    # get the data from the rest api\n                    restService.get(restPath, query).then (response) ->\n\n                        type = dataUtilsService.type(restPath)\n                        datalist = response[type]\n                        # the response should always be an array\n                        if not angular.isArray(datalist)\n                            e = \"#{datalist} is not an array\"\n                            $log.error(e)\n                            return\n\n                        # fill up the collection with initial data\n                        collection.initial(datalist)\n\n                return collection\n\n\n            control: (ep, id, method, params = {}) ->\n                restPath = dataUtilsService.restPath([ep, id])\n                restService.post restPath,\n                    id: @getNextId()\n                    jsonrpc: '2.0'\n                    method: method\n                    params: params\n\n            # returns next id for jsonrpc2 control messages\n            getNextId: ->\n                @jsonrpc ?= 1\n                @jsonrpc++\n\n            # generate functions for root endpoints\n            @generateEndpoints: ->\n                ENDPOINTS.forEach (e) =>\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    this::[\"get#{E}\"] = (args...) ->\n                        self.get(e, args...)\n\n            # opens a new accessor\n            open: ->\n                return new class DataAccessor\n                    collectionRefs = []\n                    constructor: ->\n                        @constructor.generateEndpoints()\n\n                    registerCollection: (c) ->\n                        collectionRefs.push(c)\n\n                    close: ->\n                        collectionRefs.forEach (c) -> c.close()\n\n                    # Closes the group when the scope is destroyed\n                    closeOnDestroy: (scope) ->\n                        if not angular.isFunction(scope.$on)\n                            throw new TypeError(\"Parameter 'scope' doesn't have an $on function\")\n                        scope.$on '$destroy', => @close()\n                        return this\n\n                    # Generate functions for root endpoints\n                    @generateEndpoints: ->\n                        ENDPOINTS.forEach (e) =>\n                            # capitalize endpoint names\n                            E = dataUtilsService.capitalize(e)\n                            this::[\"get#{E}\"] = (args...) ->\n                                [args, query] = dataUtilsService.splitOptions(args)\n                                query.subscribe ?= true\n                                query.accessor = this\n                                return self.get(e, args..., query)\n\n        ############## utils for testing\n        # register return values for the mocked get function\n            mocks: {}\n            spied: false\n            when: (url, query, returnValue) ->\n                if not returnValue?\n                    [query, returnValue] = [{}, query]\n                if jasmine? and not @spied\n                    spyOn(this, 'get').and.callFake(@_mockGet)\n                    @spied = true\n\n                @mocks[url] ?= {}\n                @mocks[url][query] = returnValue\n\n            expect: (url, query, returnValue) ->\n                if not returnValue?\n                    [query, returnValue] = [{}, query]\n                @_expects ?= []\n                @_expects.push([url, query])\n                @when(url, query, returnValue)\n\n            verifyNoOutstandingExpectation:  ->\n                if @_expects? and @_expects.length\n                    fail(\"expecting #{@_expects.length} more data requests \" +\n                        \"(#{angular.toJson(@_expects)})\")\n\n            # register return values with the .when function\n            # when testing get will return the given values\n            _mockGet: (args...) ->\n                [url, query] = @processArguments(args)\n                queryWithoutSubscribe = {}\n                for k, v of query\n                    if k != \"subscribe\" and k != \"accessor\"\n                        queryWithoutSubscribe[k] = v\n                if @_expects\n                    [exp_url, exp_query] = @_expects.shift()\n                    expect(exp_url).toEqual(url)\n                    expect(exp_query).toEqual(queryWithoutSubscribe)\n                returnValue = @mocks[url]?[query] or @mocks[url]?[queryWithoutSubscribe]\n                if not returnValue? then throw new Error(\"No return value for: #{url} \" +\n                    \"(#{angular.toJson(queryWithoutSubscribe)})\")\n                collection = @createCollection(url, queryWithoutSubscribe, returnValue)\n                return collection\n\n            processArguments: (args) ->\n                [args, query] = dataUtilsService.splitOptions(args)\n                restPath = dataUtilsService.restPath(args)\n                return [restPath, query or {}]\n\n\n            # for easier testing\n            createCollection: (url, query, response) ->\n                restPath = url\n                type = dataUtilsService.type(restPath)\n                collection = new Collection(restPath, query)\n\n                # populate the response with default ids\n                # for convenience\n                id = collection.id\n                idCounter = 1\n                response.forEach (d) ->\n                    if not d.hasOwnProperty(id)\n                        d[id] = idCounter++\n\n                collection.initial(response)\n                return collection\n","class Socket extends Service\n    constructor: ($log, $q, $rootScope, $location, Stream, webSocketService) ->\n        return new class SocketService\n            # subscribe to event stream to get WebSocket messages\n            eventStream: null\n\n            constructor: ->\n                # waiting queue\n                @queue = []\n                # deferred object for resolving response promises\n                # map of id: promise\n                @deferred = {}\n                @subscribers = {}\n                # open socket\n                @open()\n\n            open: ->\n                @socket ?= webSocketService.getWebSocket(@getUrl())\n\n                # flush queue on open\n                @socket.onopen = => @flush()\n\n                @setupEventStream()\n\n            setupEventStream: ->\n                @eventStream ?= new Stream()\n\n                @socket.onmessage = (message) =>\n                    try\n                        data = angular.fromJson(message.data)\n\n                        # response message\n                        if data.code?\n                            id = data._id\n                            if data.code is 200 then @deferred[id]?.resolve(true)\n                            else @deferred[id]?.reject(data)\n                        # status update message\n                        else\n                            $rootScope.$applyAsync =>\n                                @eventStream.push(data)\n                    catch e\n                        @deferred[id]?.reject(e)\n\n            close: ->\n                @socket.close()\n\n            send: (data) ->\n                # add _id to each message\n                id = @nextId()\n                data._id = id\n                @deferred[id] ?= $q.defer()\n\n                data = angular.toJson(data)\n                # ReconnectingWebSocket does not put status constants on instance\n                if @socket.readyState is (@socket.OPEN or 1)\n                    @socket.send(data)\n                else\n                    # if the WebSocket is not open yet, add the data to the queue\n                    @queue.push(data)\n\n                # return promise, which will be resolved once a response message has the same id\n                return @deferred[id].promise\n\n            flush: ->\n                # send all the data waiting in the queue\n                while data = @queue.pop()\n                    @socket.send(data)\n\n            nextId: ->\n                @id ?= 0\n                @id = if @id < 1000 then @id + 1 else 0\n                return @id\n\n            getRootPath: ->\n                return location.pathname\n\n            getUrl: ->\n                host = $location.host()\n                protocol = if $location.protocol() is 'https' then 'wss' else 'ws'\n                defaultport = if $location.protocol() is 'https' then 443 else 80\n                path = @getRootPath()\n                port = if $location.port() is defaultport then '' else ':' + $location.port()\n                return \"#{protocol}://#{host}#{port}#{path}ws\"\n\n            # High level api. Maintain a list of subscribers for one event path\n            subscribe: (eventPath, collection) ->\n                l = @subscribers[eventPath] ?= []\n                l.push(collection)\n                if l.length == 1\n                    return @send\n                        cmd: \"startConsuming\"\n                        path: eventPath\n                return $q.resolve()\n\n            unsubscribe: (eventPath, collection) ->\n                l = @subscribers[eventPath] ?= []\n                pos = l.indexOf(collection)\n                if pos >= 0\n                    l.splice(pos, 1)\n                    if l.length == 0\n                        return @send\n                            cmd: \"stopConsuming\"\n                            path: eventPath\n                return $q.resolve()\n","class WebSocketBackend extends Service\n    self = null\n    constructor: ->\n        self = @\n        @webSocket = new MockWebSocket()\n\n    sendQueue: []\n    receiveQueue: []\n    send: (message) ->\n        data = {data: message}\n        @sendQueue.push(data)\n\n    flush: ->\n        while message = @sendQueue.shift()\n            @webSocket.onmessage(message)\n\n    getWebSocket: ->\n        return @webSocket\n\n    # mocked WebSocket\n    class MockWebSocket\n        OPEN: 1\n        send: (message) ->\n            self.receiveQueue.push(message)\n        close: -> @onclose?()\n","class WebSocket extends Service\n    constructor: ($window) ->\n        return new class WebSocketProvider\n            constructor: ->\n\n            # this function will be mocked in the tests\n            getWebSocket: (url) ->\n                match = /wss?:\\/\\//.exec(url)\n\n                if not match\n                    throw new Error('Invalid url provided')\n\n                # use ReconnectingWebSocket if available\n                # TODO write own implementation?\n                if $window.ReconnectingWebSocket?\n                    new $window.ReconnectingWebSocket(url)\n                else\n                    new $window.WebSocket(url)\n","class Rest extends Service\n    constructor: ($http, $q, API) ->\n        return new class RestService\n            execute: (config) ->\n                $q (resolve, reject) ->\n                    $http(config)\n                    .success (response) ->\n                        try\n                            data = angular.fromJson(response)\n                            resolve(data)\n                        catch e\n                            reject(e)\n                    .error (reason) -> reject(reason)\n\n            get: (url, params = {}) ->\n                canceller = $q.defer()\n                config =\n                    method: 'GET'\n                    url: @parse(API, url)\n                    params: params\n                    headers:\n                        'Accept': 'application/json'\n                    timeout: canceller.promise\n\n                promise = @execute(config)\n                promise.cancel = canceller.resolve\n                return promise\n\n            post: (url, data = {}) ->\n                canceller = $q.defer()\n                config =\n                    method: 'POST'\n                    url: @parse(API, url)\n                    data: data\n                    headers:\n                        'Content-Type': 'application/json'\n                    timeout: canceller.promise\n\n                promise = @execute(config)\n                promise.cancel = canceller.resolve\n                return promise\n\n            parse: (args...) ->\n                args.join('/').replace(/\\/\\//, '/')\n","class Stream extends Factory\n    constructor: ->\n        return class StreamInstance\n            # the unsubscribe listener will be called on each unsubscribe call\n            onUnsubscribe: null\n            listeners: []\n\n            subscribe: (listener) ->\n                if not angular.isFunction(listener)\n                    throw new TypeError(\"Parameter 'listener' must be a function, not #{typeof listener}\")\n\n                listener.id = @generateId()\n                @listeners.push(listener)\n\n                # unsubscribe\n                return =>\n                    i = @listeners.indexOf(listener)\n                    removed = @listeners.splice(i, 1)\n                    # call the unsubscribe listener if it's a function\n                    if angular.isFunction(@onUnsubscribe)\n                        @onUnsubscribe(listener)\n\n            push: (data) ->\n                # call each listener\n                listener(data) for listener in @listeners\n\n            destroy: ->\n                # @listeners = [], but keep the reference\n                @listeners.pop() while @listeners.length > 0\n\n            generateId: ->\n                @lastId ?= 0\n                return @lastId++\n","class Collection extends Factory\n    constructor: ($q, $injector, $log, dataUtilsService, socketService, DataQuery, $timeout) ->\n        angular.isArray = Array.isArray = (arg) ->\n            return arg instanceof Array\n        return class CollectionInstance extends Array\n            constructor: (@restPath, @query = {}, @accessor) ->\n                @socketPath = dataUtilsService.socketPath(@restPath)\n                @type = dataUtilsService.type(@restPath)\n                @id = dataUtilsService.classId(@restPath)\n                @endpoint = dataUtilsService.endpointPath(@restPath)\n                @socketPathRE = dataUtilsService.socketPathRE(@socketPath)\n                @queryExecutor = new DataQuery(@query)\n                # default event handlers\n                @onUpdate = angular.noop\n                @onNew = angular.noop\n                @onChange = angular.noop\n                @_new = []\n                @_updated = []\n                @_byId = {}\n                @$resolved = false\n                try\n                    # try to get the wrapper class\n                    className = dataUtilsService.className(@restPath)\n                    # the classes have the dataService as a dependency\n                    # $injector.get doesn't throw circular dependency exception\n                    @WrapperClass = $injector.get(className)\n                catch e\n                    # use the Base class otherwise\n                    console.log \"unknown wrapper for\", className\n                    @WrapperClass = $injector.get('Base')\n                socketService.eventStream.subscribe(@listener)\n                @accessor?.registerCollection(this)\n\n            then: (callback) ->\n                console.log \"Should not use collection as a promise. Callback will be called several times!\"\n                @onChange = callback\n\n            getArray: ->\n                console.log \"getArray() is deprecated. dataService.get() directly returns the collection!\"\n                return this\n\n            get: (id) ->\n                return @_byId[id]\n\n            hasOwnProperty: (id) ->\n                return @_byId.hasOwnProperty(id)\n\n            listener: (data) =>\n                key = data.k\n                message = data.m\n                # Test if the message is for me\n                if @socketPathRE.test(key)\n                    @put(message)\n                    @recomputeQuery()\n                    @sendEvents()\n\n            subscribe: ->\n                return socketService.subscribe(@socketPath, this)\n\n            close: ->\n                return socketService.unsubscribe(@socketPath, this)\n\n            initial: (data) ->\n                @$resolved = true\n                # put items one by one if not already in the array\n                # if they are that means they come from an update event\n                # the event is always considered the latest data\n                # so we don't overwrite it with REST data\n                for i in data\n                    if not @hasOwnProperty(i[@id])\n                        @put(i)\n                @recomputeQuery()\n                @sendEvents(initial:true)\n\n            from: (data) ->\n                # put items one by one\n                @put(i) for i in data\n                @recomputeQuery()\n                @sendEvents()\n\n            item: (i) ->\n                return this[i]\n\n            add: (element) ->\n                # don't create wrapper if element is filtered\n                if @queryExecutor.filter([element]).length == 0\n                    return\n                instance = new @WrapperClass(element, @endpoint)\n                instance.setAccessor(@accessor)\n                instance.$collection = this\n                @_new.push(instance)\n                @_byId[instance[@id]] = instance\n                @push(instance)\n\n            put: (element) ->\n                for old in this\n                    if old[@id] == element[@id]\n                        old.update(element)\n                        @_updated.push(old)\n                        return\n                # if not found, add it.\n                @add(element)\n\n            clear: ->\n                @pop() while @length > 0\n\n            delete: (element) ->\n                index = @indexOf(element)\n                if index > -1 then @splice(index, 1)\n\n            recomputeQuery: ->\n                @queryExecutor.computeQuery(this)\n\n            sendEvents: (opts)->\n                # send the events asynchronously\n                _new = @_new\n                _updated = @_updated\n                @_updated = []\n                @_new = []\n                $timeout =>\n                    changed = false\n                    for i in _new\n                        # is it still in the array?\n                        if i in this\n                            @onNew(i)\n                            changed = true\n\n                    for i in _updated\n                        # is it still in the array?\n                        if i in this\n                            @onUpdate(i)\n                            changed = true\n\n                    if changed or opts?.initial\n                        @onChange(this)\n                , 0\n","class DataQuery extends Factory\n    constructor: ($http, $q, API) ->\n        return class DataQueryClass\n            constructor: (query = {}) ->\n                @query = query\n                @filters = {}\n                for fieldAndOperator, value of query\n                    if ['field', 'limit', 'offset', 'order', 'property'].indexOf(fieldAndOperator) < 0\n                        if ['on', 'true', 'yes'].indexOf(value) > -1 then value = true\n                        else if ['off', 'false', 'no'].indexOf(value) > -1 then value = false\n                        @filters[fieldAndOperator] = value\n\n            computeQuery: (array) ->\n                # 1. filtering\n                @filter(array)\n\n                # 2. sorting\n                order = @query?.order\n                @sort(array, order)\n\n                # 3. limit\n                limit = @query?.limit\n                @limit(array, limit)\n\n\n            isFiltered: (v) ->\n                cmpByOp = {}\n                for fieldAndOperator, value of @filters\n                    [field, operator] = fieldAndOperator.split('__')\n                    cmp = false\n                    switch operator\n                        when 'ne' then cmp = v[field] != value\n                        when 'lt' then cmp = v[field] <  value\n                        when 'le' then cmp = v[field] <= value\n                        when 'gt' then cmp = v[field] >  value\n                        when 'ge' then cmp = v[field] >= value\n                        else cmp = v[field] == value or\n                            (angular.isArray(v[field]) and value in v[field]) or\n                            (angular.isArray(value) and value.length == 0) or\n                            (angular.isArray(value) and v[field] in value) or\n                            # private fields added by the data service\n                            v[\"_#{field}\"] == value or\n                            (angular.isArray(v[\"_#{field}\"]) and value in v[\"_#{field}\"]) or\n                            (angular.isArray(value) and v[\"_#{field}\"] in value)\n                    cmpByOp[fieldAndOperator] = cmpByOp[fieldAndOperator] || cmp\n                for own op, v of cmpByOp\n                    return false if !v\n                return true\n\n            filter: (array) ->\n                i = 0\n                while i < array.length\n                    v = array[i]\n                    if @isFiltered(v)\n                        i += 1\n                    else\n                        array.splice(i, 1)\n\n            sort: (array, order) ->\n                compare = (property) ->\n                    reverse = false\n                    if property[0] is '-'\n                        property = property[1..]\n                        reverse = true\n\n                    return (a, b) ->\n                        if reverse then [a, b] = [b, a]\n\n                        if a[property] < b[property] then -1\n                        else if a[property] > b[property] then 1\n                        else 0\n                if angular.isString(order)\n                    array.sort compare(order)\n                else if angular.isArray(order)\n                    array.sort (a, b) ->\n                        for o in order\n                            f = compare(o)(a, b)\n                            if f then return f\n                        return 0\n\n            limit: (array, limit) ->\n                while array.length > limit\n                    array.pop()\n"],"sourceRoot":"/source/"}