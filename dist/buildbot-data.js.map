{"version":3,"sources":["data.module.coffee","data.constant.coffee","classes/base.service.coffee","classes/build.service.coffee","classes/builder.service.coffee","classes/buildrequest.service.coffee","classes/buildset.service.coffee","classes/buildslave.service.coffee","classes/change.service.coffee","classes/changesource.service.coffee","classes/forcescheduler.service.coffee","classes/logs.service.coffee","classes/master.service.coffee","classes/properties.service.coffee","classes/scheduler.service.coffee","classes/sourcestamp.service.coffee","classes/step.service.coffee","services/data/data.service.coffee","services/dataUtils/dataUtils.service.coffee","services/rest/rest.service.coffee","services/socket/socket.service.coffee","services/socket/webSocketBackend.service.coffee","services/socket/websocket.service.coffee","services/stream/stream.service.coffee"],"names":[],"mappings":"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","file":"buildbot-data.js","sourcesContent":["# Register new module\nclass App extends App\n    constructor: ->\n        return []","class Api extends Constant\n    constructor: -> return 'api/v2/'\n\nclass Endpoints extends Constant\n    constructor: ->\n        # Rootlinks\n        return [\n            'builders'\n            'builds'\n            'buildrequests'\n            'buildslaves'\n            'buildsets'\n            'changes'\n            'changesources'\n            'masters'\n            'sourcestamps'\n            'schedulers'\n            'forceschedulers'\n        ]\n","class Base extends Factory\n    constructor: (dataService, socketService, dataUtilsService) ->\n        return class BaseInstance\n            constructor: (object, @_endpoint, childEndpoints = []) ->\n                if not angular.isString(@_endpoint)\n                    throw new TypeError(\"Parameter 'endpoint' must be a string, not #{typeof @endpoint}\")\n\n                # add object fields to the instance\n                @update(object)\n\n                # generate loadXXX functions\n                @constructor.generateFunctions(childEndpoints)\n\n                # get the id of the class type\n                classId = dataUtilsService.classId(@_endpoint)\n                @_id = @[classId]\n\n                # reset endpoint to base\n                if @_id?\n                    @_endpoint = dataUtilsService.type(@_endpoint)\n                # subscribe for WebSocket events\n                @subscribe()\n\n            update: (o) ->\n                angular.merge(@, o)\n\n            get: (args...) ->\n                dataService.get(@_endpoint, @_id, args...)\n\n            subscribe: ->\n                listener = (data) =>\n                    key = data.k\n                    message = data.m\n                    # filter for relevant message\n                    streamRegex = ///^#{@_endpoint}\\/#{@_id}\\/\\w+$///g\n                    # update when the key matches the instance\n                    if streamRegex.test(key) then @update(message)\n                @_unsubscribeEventListener = socketService.eventStream.subscribe(listener)\n                # _listenerId is required by the stopConsuming logic in dataService\n                @_listenerId = listener.id\n\n            unsubscribe: ->\n                # unsubscribe childs\n                for k, v of this\n                    if angular.isArray(v)\n                        v.forEach (e) -> e.unsubscribe() if e instanceof BaseInstance\n                @_unsubscribeEventListener()\n\n            # generate endpoint functions for the class\n            @generateFunctions: (endpoints) ->\n                endpoints.forEach (e) =>\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    # adds loadXXX functions to the prototype\n                    @::[\"load#{E}\"] = (args...) ->\n                        p = @get(e, args...)\n                        @[e] = p.getArray()\n                        return p\n                    # adds getXXX functions to the prototype\n                    @::[\"get#{E}\"] = (args...) ->\n                        return @get(e, args...)\n","class Build extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'changes'           # /changes\n                    'properties'        # /properties\n                    'steps'             # /steps/:name\n                                        # /steps/:stepid\n                ]\n\n                super(object, endpoint, endpoints)\n","class Builder extends Factory\n    constructor: (Base, dataService) ->\n        return class BuilderInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'builds'            # /builds/:buildid\n                    'buildrequests'     # /buildrequests/:buildrequestid\n                    'forceschedulers'   # /forceschedulers\n                    'buildslaves'       # /buildslaves/:buildslaveid\n                                        # /buildslaves/:name\n                    'masters'           # /masters/:masterid\n                ]\n\n                super(object, endpoint, endpoints)\n","class Buildrequest extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildrequestInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'builds'            # /builds\n                ]\n\n                super(object, endpoint, endpoints)\n","class Buildset extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildsetInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'properties'        # /properties\n                ]\n\n                super(object, endpoint, endpoints)\n","class Buildslave extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildslaveInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Change extends Factory\n    constructor: (Base, dataService) ->\n        return class ChangeInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Changesource extends Factory\n    constructor: (dataService, Base) ->\n        return class ChangesourceInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Forcescheduler extends Factory\n    constructor: (Base, dataService) ->\n        return class ForceschedulerInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Log extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'chunks'           # /chunks\n                    'contents'\n                ]\n                super(object, endpoint, endpoints)\n","class Master extends Factory\n    constructor: (Base, dataService) ->\n        return class MasterInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'builders'          # /builders/:builderid\n                    'buildslaves'       # /buildslaves/:buildslaveid\n                                        # /buildslaves/:name\n                    'changesources'     # /changesources/:changesourceid\n                    'schedulers'        # /schedulers/:schedulerid\n                ]\n\n                super(object, endpoint, endpoints)\n","# damn grammar. I claim that properties singular is propertie\nclass Propertie extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint, [])\n","class Scheduler extends Factory\n    constructor: (Base, dataService) ->\n        return class SchedulerInstance extends Base\n            constructor: (object, endpoint) ->\n                super(object, endpoint)\n","class Sourcestamp extends Factory\n    constructor: (Base, dataService) ->\n        return class SourcestampInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'changes'           # /changes\n                ]\n\n                super(object, endpoint, endpoints)\n","class Step extends Factory\n    constructor: (Base, dataService) ->\n        return class BuildInstance extends Base\n            constructor: (object, endpoint) ->\n                endpoints = [\n                    'logs'           # /logs\n                ]\n\n                super(object, endpoint, endpoints)\n","class Data extends Provider\n    constructor: ->\n    # TODO caching\n    cache: false\n\n    ### @ngInject ###\n    $get: ($log, $injector, $q, restService, socketService, dataUtilsService, ENDPOINTS) ->\n        return new class DataService\n            self = null\n            constructor: ->\n                self = @\n                # setup socket listeners\n                #socketService.eventStream.onUnsubscribe = @unsubscribeListener\n                socketService.onclose = @socketCloseListener\n                # generate loadXXX functions for root endpoints\n                @constructor.generateEndpoints()\n\n            # the arguments are in this order: endpoint, id, child, id of child, query\n            get: (args...) ->\n                # keep defined arguments only\n                args = args.filter (e) -> e?\n\n                # get the query parameters\n                [..., last] = args\n                # subscribe for changes if 'subscribe' is true or undefined\n                subscribe = last.subscribe or not last.subscribe?\n                if angular.isObject(last)\n                    query = args.pop()\n                    # 'subscribe' is not part of the query\n                    delete query.subscribe\n\n                # up to date array, this will be returned\n                updating = []\n\n                promise = $q (resolve, reject) =>\n\n                    if subscribe\n                        # TODO needs testing\n                        # store all messages before the classes subscribe for changes\n                        # resend once those are ready\n                        messages = []\n                        unsubscribe = socketService.eventStream.subscribe (data) ->\n                            messages.push(data)\n\n                        # start consuming WebSocket messages\n                        socketPath = dataUtilsService.socketPath(args)\n                        socketPromise = @startConsuming(socketPath)\n                    else socketPromise = $q.resolve()\n\n                    socketPromise.then =>\n                        # get the data from the rest api\n                        restPath = dataUtilsService.restPath(args)\n                        restPromise = restService.get(restPath, query)\n\n                        restPromise.then (response) =>\n\n                            type = dataUtilsService.type(restPath)\n                            response = response[type]\n                            try\n                                # try to get the wrapper class\n                                className = dataUtilsService.className(restPath)\n                                # the classes have the dataService as a dependency\n                                # $injector.get doesn't throw circular dependency exception\n                                WrapperClass = $injector.get(className)\n                            catch e\n                                # use the Base class otherwise\n                                console.log \"unknown wrapper for\", className\n                                WrapperClass = $injector.get('Base')\n                            # the response should always be an array\n                            if angular.isArray(response)\n                                # strip the id or name from the path if it's there\n                                endpoint = dataUtilsService.endpointPath(args)\n                                # wrap the elements in classes\n                                response = response.map (i) -> new WrapperClass(i, endpoint)\n                                # map of path: [listener id]\n                                @listeners ?= {}\n                                # add listener ids to the socket path\n                                @listeners[socketPath] ?= []\n                                response.forEach (r) =>\n                                    @listeners[socketPath].push(r._listenerId)\n                                # handle /new messages\n                                socketService.eventStream.subscribe (data) =>\n                                    key = data.k\n                                    message = data.m\n                                    # filter for relevant message\n                                    streamRegex = ///^#{endpoint}\\/(\\w+|\\d+)\\/new$///g\n                                    # add new instance to the updating array\n                                    if streamRegex.test(key)\n                                        newInstance = new WrapperClass(message, endpoint)\n                                        updating.push(newInstance)\n                                        @listeners[socketPath].push(newInstance._listenerId)\n                                # TODO needs testing\n                                # resend messages\n                                if subscribe\n                                    messages.forEach (m) -> socketService.eventStream.push(m)\n                                    unsubscribe()\n                                # fill up the updating array\n                                angular.copy(response, updating)\n                                # the updating array is ready to be used\n                                resolve(updating)\n                            else\n                                e = \"#{response} is not an array\"\n                                $log.error(e)\n                                reject(e)\n                        , (e) => reject(e)\n                    , (e) => reject(e)\n\n                promise.getArray = -> updating\n\n                return promise\n\n            startConsuming: (path) ->\n                socketService.send({\n                    cmd: 'startConsuming'\n                    path: path\n                })\n\n            stopConsuming: (path) ->\n                socketService.send({\n                    cmd: 'stopConsuming'\n                    path: path\n                })\n\n            # make the stopConsuming calls when there is no listener for a specific endpoint\n            unsubscribeListener: (removed) =>\n                for path, ids of @listeners\n                    i = ids.indexOf(removed.id)\n                    if i > -1\n                        ids.splice(i, 1)\n                        if ids.length is 0 then @stopConsuming(path)\n\n            # resend the start consuming messages for active paths\n            socketCloseListener: =>\n                if not @listeners? then return\n                for path, ids of @listeners\n                    if ids.length > 0 then @startConsuming(path)\n                return null\n\n            control: (method, params) ->\n                restService.post\n                    id: @getNextId()\n                    jsonrpc: '2.0'\n                    method: method\n                    params: params\n\n            # returns next id for jsonrpc2 control messages\n            getNextId: ->\n                @jsonrpc ?= 1\n                @jsonrpc++\n\n            # generate functions for root endpoints\n            @generateEndpoints: ->\n                ENDPOINTS.forEach (e) =>\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    @::[\"get#{E}\"] = (args...) =>\n                        self.get(e, args...)\n\n            # opens a new accessor\n            open: ->\n                return new class DataAccessor\n                    rootClasses = []\n                    constructor: ->\n                        @rootClasses = rootClasses\n                        @constructor.generateEndpoints()\n\n                    # calls unsubscribe on each root classes\n                    close: ->\n                        @rootClasses.forEach (c) -> c.unsubscribe()\n\n                    # closes the group when the scope is destroyed\n                    closeOnDestroy: (scope) ->\n                        if not angular.isFunction(scope.$on)\n                            throw new TypeError(\"Parameter 'scope' doesn't have an $on function\")\n                        scope.$on '$destroy', => @close()\n\n                    # generate functions for root endpoints\n                    @generateEndpoints: ->\n                        ENDPOINTS.forEach (e) =>\n                            # capitalize endpoint names\n                            E = dataUtilsService.capitalize(e)\n                            @::[\"get#{E}\"] = (args...) =>\n                                p = self[\"get#{E}\"](args...)\n                                # when the promise is resolved add the root level classes\n                                # to an array (on close we can call unsubscribe on those)\n                                p.then (classes) ->\n                                    classes.forEach (c) -> rootClasses.push(c)\n                                return p\n\n        ############## utils for testing\n        # register return values for the mocked get function\n            mocks: {}\n            spied: false\n            when: (args...) ->\n                [url, query, returnValue] = args\n                if not returnValue?\n                    [query, returnValue] = [{}, query]\n                if jasmine? and not @spied\n                    spyOn(@, 'get').and.callFake(@_mockGet)\n                    @spied = true\n\n                @mocks[url] ?= {}\n                @mocks[url][query] = returnValue\n\n            # register return values with the .when function\n            # when testing get will return the given values\n            _mockGet: (args...) ->\n                [url, query] = @processArguments(args)\n                queryWithoutSubscribe = angular.copy(query)\n                delete queryWithoutSubscribe.subscribe\n                returnValue = @mocks[url]?[query] or @mocks[url]?[queryWithoutSubscribe]\n                if not returnValue? then throw new Error(\"No return value for: #{url} (#{angular.toJson(query)})\")\n                collection = @createCollection(url, query, returnValue)\n                p = $q.resolve(collection)\n                p.getArray = -> collection\n                return p\n\n            processArguments: (args) ->\n                # keep defined arguments only\n                args.filter (e) -> e?\n                # get the query parameters\n                [..., last] = args\n                if angular.isObject(last)\n                    query = args.pop()\n                restPath = dataUtilsService.restPath(args)\n                return [restPath, query or {}]\n\n\n            # for easier testing\n            createCollection: (url, query, response) ->\n                restPath = url\n                type = dataUtilsService.type(restPath)\n                try\n                    # try to get the wrapper class\n                    className = dataUtilsService.className(restPath)\n                    # the classes have the dataService as a dependency\n                    # $injector.get doesn't throw circular dependency exception\n                    WrapperClass = $injector.get(className)\n                catch e\n                    # use the Base class otherwise\n                    console.log \"unknown wrapper for\", className\n                    WrapperClass = $injector.get('Base')\n                # strip the id or name from the path if it's there\n                endpoint = dataUtilsService.endpointPath([restPath])\n                # wrap the elements in classes\n                response = response.map (i) -> new WrapperClass(i, endpoint)\n","class DataUtils extends Service\n    constructor: ->\n        return new class dataUtilsService\n            # capitalize first word\n            capitalize: (string) ->\n                string[0].toUpperCase() + string[1..].toLowerCase()\n\n            # returns the type of the endpoint\n            type: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # if the argument count is even, the last argument is an id\n                if a.length % 2 is 0 then a.pop()\n                a.pop()\n\n            # singularize the type name\n            singularType: (arg) ->\n                @type(arg).replace(/s$/, '')\n\n            className: (arg) ->\n                @capitalize(@singularType(arg))\n\n            classId: (arg) ->\n                @singularType(arg) + \"id\"\n\n            socketPath: (arg) ->\n                a = @copyOrSplit(arg)\n                # if the argument count is even, the last argument is an id\n                stars = ['*']\n                # is it odd?\n                if a.length % 2 is 1 then stars.push('*')\n                a.concat(stars).join('/')\n\n            restPath: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                a.join('/')\n\n            endpointPath: (arg) ->\n                # if the argument count is even, the last argument is an id\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # is it even?\n                if a.length % 2 is 0 then a.pop()\n                a.join('/')\n\n            copyOrSplit: (arrayOrString) ->\n                if angular.isArray(arrayOrString)\n                    # return a copy\n                    arrayOrString[..]\n                else if angular.isString(arrayOrString)\n                    # split the string to get an array\n                    arrayOrString.split('/')\n                else\n                    throw new TypeError(\"Parameter 'arrayOrString' must be a array or a string, not #{typeof arrayOrString}\")\n            unWrap: (object, path) ->\n                object[@type(path)]\n\n            parse: (object) ->\n                for k, v of object\n                    try\n                        object[k] = angular.fromJson(v)\n                    catch error then # ignore\n                return object\n\n            numberOrString: (str = null) ->\n                # if already a number\n                if angular.isNumber(str) then return str\n                # else parse string to integer\n                number = parseInt str, 10\n                if !isNaN(number) then number else str\n\n            emailInString: (string) ->\n                if not angular.isString(string)\n                    throw new TypeError(\"Parameter 'string' must be a string, not #{typeof string}\")\n                emailRegex = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/\n                try\n                    emailRegex.exec(string).pop() or ''\n                catch\n                    ''\n","class Rest extends Service\n    constructor: ($http, $q, API) ->\n        return new class RestService\n            execute: (config) ->\n                $q (resolve, reject) =>\n                    $http(config)\n                    .success (response) ->\n                        try\n                            data = angular.fromJson(response)\n                            resolve(data)\n                        catch e\n                            reject(e)\n                    .error (reason) -> reject(reason)\n\n            get: (url, params = {}) ->\n                config =\n                    method: 'GET'\n                    url: @parse(API, url)\n                    params: params\n                    headers:\n                      'Accept': 'application/json'\n\n                @execute(config)\n\n            post: (url, data = {}) ->\n                config =\n                    method: 'POST'\n                    url: @parse(API, url)\n                    data: data\n                    headers:\n                        'Content-Type': 'application/json'\n\n                @execute(config)\n\n            parse: (args...) ->\n                args.join('/').replace(/\\/\\//, '/')\n","class Socket extends Service\n    constructor: ($log, $q, $rootScope, $location, Stream, webSocketService) ->\n        return new class SocketService\n            # subscribe to event stream to get WebSocket messages\n            eventStream: null\n\n            constructor: ->\n                # waiting queue\n                @queue = []\n                # deferred object for resolving response promises\n                # map of id: promise\n                @deferred = {}\n                # open socket\n                @open()\n\n            open: ->\n                @socket ?= webSocketService.getWebSocket(@getUrl())\n\n                # flush queue on open\n                @socket.onopen = => @flush()\n\n                @setupEventStream()\n\n            setupEventStream: ->\n                @eventStream ?= new Stream()\n\n                @socket.onmessage = (message) =>\n                    try\n                        data = angular.fromJson(message.data)\n\n                        # response message\n                        if data.code?\n                            id = data._id\n                            if data.code is 200 then @deferred[id]?.resolve(true)\n                            else @deferred[id]?.reject(data)\n                        # status update message\n                        else\n                            $rootScope.$applyAsync =>\n                                @eventStream.push(data)\n                    catch e\n                        @deferred[id]?.reject(e)\n\n            close: ->\n                @socket.close()\n\n            send: (data) ->\n                # add _id to each message\n                id = @nextId()\n                data._id = id\n                @deferred[id] ?= $q.defer()\n\n                data = angular.toJson(data)\n                # ReconnectingWebSocket does not put status constants on instance\n                if @socket.readyState is (@socket.OPEN or 1)\n                    @socket.send(data)\n                else\n                    # if the WebSocket is not open yet, add the data to the queue\n                    @queue.push(data)\n\n                # return promise, which will be resolved once a response message has the same id\n                return @deferred[id].promise\n\n            flush: ->\n                # send all the data waiting in the queue\n                while data = @queue.pop()\n                    @socket.send(data)\n\n            nextId: ->\n                @id ?= 0\n                @id = if @id < 1000 then @id + 1 else 0\n                return @id\n\n            getRootPath: ->\n                return location.pathname\n\n            getUrl: ->\n                host = $location.host()\n                protocol = if $location.protocol() is 'https' then 'wss' else 'ws'\n                defaultport = if $location.protocol() is 'https' then 443 else 80\n                path = @getRootPath()\n                port = if $location.port() is defaultport then '' else ':' + $location.port()\n                return \"#{protocol}://#{host}#{port}#{path}ws\"\n","class WebSocketBackend extends Service\n    self = null\n    constructor: ->\n        self = @\n        @webSocket = new MockWebSocket()\n\n    sendQueue: []\n    receiveQueue: []\n    send: (message) ->\n        data = {data: message}\n        @sendQueue.push(data)\n\n    flush: ->\n        while message = @sendQueue.shift()\n            @webSocket.onmessage(message)\n\n    getWebSocket: ->\n        return @webSocket\n\n    # mocked WebSocket\n    class MockWebSocket\n        OPEN: 1\n        send: (message) ->\n            self.receiveQueue.push(message)\n        close: -> @onclose?()\n","class WebSocket extends Service\n    constructor: ($window) ->\n        return new class WebSocketProvider\n            constructor: ->\n\n            # this function will be mocked in the tests\n            getWebSocket: (url) ->\n                match = /wss?:\\/\\//.exec(url)\n\n                if not match\n                    throw new Error('Invalid url provided')\n\n                # use ReconnectingWebSocket if available\n                # TODO write own implementation?\n                if $window.ReconnectingWebSocket?\n                    new $window.ReconnectingWebSocket(url)\n                else\n                    new $window.WebSocket(url)\n","class Stream extends Factory\n    constructor: ->\n        return class StreamInstance\n            # the unsubscribe listener will be called on each unsubscribe call\n            onUnsubscribe: null\n            listeners: []\n\n            subscribe: (listener) ->\n                if not angular.isFunction(listener)\n                    throw new TypeError(\"Parameter 'listener' must be a function, not #{typeof listener}\")\n\n                listener.id = @generateId()\n                @listeners.push(listener)\n\n                # unsubscribe\n                return =>\n                    i = @listeners.indexOf(listener)\n                    removed = @listeners.splice(i, 1)\n                    # call the unsubscribe listener if it's a function\n                    if angular.isFunction(@onUnsubscribe)\n                        @onUnsubscribe(listener)\n\n            push: (data) ->\n                # call each listener\n                listener(data) for listener in @listeners\n\n            destroy: ->\n                # @listeners = [], but keep the reference\n                @listeners.pop() while @listeners.length > 0\n\n            generateId: ->\n                @lastId ?= 0\n                return @lastId++\n"],"sourceRoot":"/source/"}