{"version":3,"sources":["data.module.coffee","data.config.coffee","data.constant.coffee","specification.constant.coffee","mock/generator.service.coffee","services/data/data.service.coffee","services/data/dbstores.constant.coffee","services/dataUtils/dataUtils.service.coffee","services/indexeddb/indexeddb.service.coffee","services/rest/rest.service.coffee","services/socket/socket.service.coffee","services/socket/webSocketBackend.service.coffee","services/tabex/tabex.service.coffee","services/data/collection/collection.service.coffee","services/data/wrapper/wrapper.service.coffee"],"names":[],"mappings":"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","file":"scripts.js","sourcesContent":["# Register new module\nclass App extends App\n    constructor: ->\n        return []\n","class HttpConfig extends Config\n    constructor: ($httpProvider) ->\n        # configure $http service to combine processing\n        # of multiple http responses received at around\n        # the same time via $rootScope.$applyAsync\n        $httpProvider.useApplyAsync(true)\n        ### @ngInject ###\n        $httpProvider.interceptors.push ($log, API) ->\n            return request: (config) ->\n                # log API request only\n                if config.url.indexOf(API) is 0\n                    $log.debug(\"#{config.method} #{config.url}\")\n                return config\n","class Api extends Constant\n    constructor: -> return 'api/v2/'\n","# Class specification contains the fields and paths for every type\n# n: number\n# i: identifier\nclass Specification extends Constant\n    constructor: ->\n        return {\n            FIELDTYPES:\n                IDENTIFIER: 'i'\n                NUMBER: 'n'\n\n            builds:\n                id: 'buildid'\n                fields: [\n                    'buildid'\n                    'builderid'\n                    'buildrequestid'\n                    'buildslaveid'\n                    'complete'\n                    'complete_at'\n                    'masterid'\n                    'number'\n                    'results'\n                    'started_at'\n                    'state_string'\n                ]\n                root: true\n                paths: [\n                    'changes'\n                    'properties'\n                    'steps'\n                    'steps/i:name'\n                    'steps/i:name/logs'\n                    'steps/i:name/logs/i:slug'\n                    'steps/i:name/logs/i:slug/contents'\n                    'steps/i:name/logs/i:slug/raw'\n                    'steps/n:number'\n                    'steps/n:number/logs'\n                    'steps/n:number/logs/i:slug'\n                    'steps/n:number/logs/i:slug/contents'\n                    'steps/n:number/logs/i:slug/raw'\n                ]\n                static:\n                    complete: true\n            builders:\n                id: 'builderid'\n                identifier: 'name'\n                fields: [\n                    'builderid'\n                    'description'\n                    'name'\n                    'tags'\n                ]\n                root: true\n                paths: [\n                    'forceschedulers'\n                    'buildrequests'\n                    'masters'\n                    'masters/n:masterid'\n                    'buildslaves'\n                    'buildslaves/i:name'\n                    'buildslaves/n:buildslaveid'\n                    'builds'\n                    'builds/n:number'\n                    'builds/n:number/steps'\n                    'builds/n:number/steps/i:name'\n                    'builds/n:number/steps/i:name/logs'\n                    'builds/n:number/steps/i:name/logs/i:slug'\n                    'builds/n:number/steps/i:name/logs/i:slug/contents'\n                    'builds/n:number/steps/i:name/logs/i:slug/raw'\n                    'builds/n:number/steps/n:number'\n                    'builds/n:number/steps/n:number/logs'\n                    'builds/n:number/steps/n:number/logs/i:slug'\n                    'builds/n:number/steps/n:number/logs/i:slug/contents'\n                    'builds/n:number/steps/n:number/logs/i:slug/raw'\n                ]\n                static: true\n            buildrequests:\n                id: 'buildrequestid'\n                fields: [\n                    'buildrequestid'\n                    'builderid'\n                    'buildsetid'\n                    'claimed'\n                    'claimed_at'\n                    'claimed_by_masterid'\n                    'complete'\n                    'complete_at'\n                    'priority'\n                    'results'\n                    'submitted_at'\n                    'waited_for'\n                ]\n                root: true\n                paths: [\n                    'builds'\n                ]\n                static:\n                    complete: true\n            buildsets:\n                id: 'bsid'\n                fields: [\n                    'bsid'\n                    'complete'\n                    'complete_at'\n                    'external_idstring'\n                    'parent_buildid'\n                    'parent_relationship'\n                    'reason'\n                    'results'\n                    'sourcestamps'\n                    'submitted_at'\n                ]\n                root: true\n                paths: [\n                    'properties'\n                ]\n                static:\n                    complete: true\n            buildslaves:\n                id: 'buildslaveid'\n                fields: [\n                    'buildslaveid'\n                    'configured_on'\n                    'connected_to'\n                    'name'\n                    'slaveinfo'\n                ]\n                root: true\n                paths: []\n                static: true\n            changes:\n                id: 'changeid'\n                fields: [\n                    'changeid'\n                    'author'\n                    'branch'\n                    'category'\n                    'codebase'\n                    'comments'\n                    'files'\n                    'parent_changeids'\n                    'project'\n                    'properties'\n                    'repository'\n                    'revision'\n                    'revlink'\n                    'sourcestamp'\n                    'when_timestamp'\n                ]\n                root: true\n                paths: []\n                static: true\n            changesources:\n                id: 'changesourceid'\n                fields: [\n                    'changesourceid'\n                    'master'\n                    'name'\n                ]\n                root: true\n                paths: []\n                static: true\n            forceschedulers:\n                id: 'name'\n                fields: [\n                    'name'\n                    'all_fields'\n                    'builder_names'\n                    'label'\n                ]\n                root: true\n                paths: []\n                static: true\n            masters:\n                id: 'masterid'\n                fields: [\n                    'masterid'\n                    'active'\n                    'last_active'\n                    'name'\n                ]\n                root: true\n                paths: [\n                    'builders'\n                    'builders/n:builderid'\n                    'builders/n:builderid/buildslaves'\n                    'builders/n:builderid/buildslaves/n:buildslaveid'\n                    'builders/n:builderid/buildslaves/i:name'\n                    'buildslaves'\n                    'buildslaves/i:name'\n                    'buildslaves/n:buildslaveid'\n                    'changesources'\n                    'changesources/n:changesourceid'\n                    'schedulers'\n                    'schedulers/n:schedulerid'\n                ]\n                static: true\n            schedulers:\n                id: 'schedulerid'\n                fields: [\n                    'schedulerid'\n                    'master'\n                    'name'\n                ]\n                root: true\n                paths: []\n                static: true\n            sourcestamps:\n                id: 'ssid'\n                fields: [\n                    'ssid'\n                    'branch'\n                    'codebase'\n                    'created_at'\n                    'patch'\n                    'project'\n                    'repository'\n                    'revision'\n                ]\n                root: true\n                paths: [\n                    'changes'\n                ]\n                static: true\n\n            steps:\n                id: 'stepid'\n                identifier: 'name'\n                fields: [\n                    'stepid'\n                    'buildid'\n                    'complete'\n                    'complete_at'\n                    'hidden'\n                    'name'\n                    'number'\n                    'results'\n                    'started_at'\n                    'state_string'\n                    'urls'\n                ]\n                root: false\n                paths: [\n                    'logs'\n                    'logs/i:slug'\n                    'logs/i:slug/contents'\n                    'logs/i:slug/raw'\n                ]\n                static:\n                    complete: true\n            logs:\n                id: 'logid'\n                identifier: 'slug'\n                fields: [\n                    'logid'\n                    'complete'\n                    'name'\n                    'num_lines'\n                    'slug'\n                    'stepid'\n                    'type'\n                ]\n                root: false\n                paths: [\n                    'contents'\n                    'raw'\n                ]\n                static:\n                    complete: true\n            contents:\n                id: null\n                fields: [\n                    'logid'\n                    'logchunks'\n                    'firstline'\n                ]\n                root: false\n                restField: 'logchunks'\n            properties:\n                id: null\n                fields: []\n                root: false\n    }\n","# types for generating test data: null, number, string, boolean, timestamp, <array>[], <object>, <objectName in Specification>\nclass Generator extends Service\n    self = null\n    constructor: ->\n        self = @\n\n    number: (min = 0, max = 100) ->\n        random = Math.random() * (max - min) + min\n        Math.floor(random)\n\n    ids: {}\n    id: (name = '') ->\n        self.ids[name] ?= 0\n        self.ids[name]++\n\n    boolean: -> Math.random() < 0.5\n\n    timestamp: (after = Date.now()) ->\n        date = new Date(after + self.number(1, 1000000))\n        Math.floor(date.getTime() / 1000)\n\n    string: (length) ->\n        if length? then length++\n        self.number(100, Number.MAX_VALUE).toString(36).substring(0, length)\n\n    array: (fn, args...) ->\n        times = self.number(1, 10)\n        array = []\n        for i in [1..times]\n            array.push fn(args...)\n        return array\n","class Data extends Provider\n    cache: true\n    config = null\n    constructor: ->\n        config = cache: @cache\n\n    ### @ngInject ###\n    $get: ($log, $injector, $q, $window, Collection, restService, dataUtilsService, tabexService, indexedDBService, SPECIFICATION) ->\n        return new class DataService\n            self = null\n            constructor: ->\n                self = @\n                angular.extend(@, config)\n                # generate loadXXX functions for root endpoints\n                endpoints = Object.keys(SPECIFICATION).filter (e) -> SPECIFICATION[e].id?\n                @constructor.generateEndpoints(endpoints)\n\n            clearCache: ->\n                indexedDBService.clear().then ->\n                    if $injector.has('$state')\n                        $injector.get('$state').reload()\n                    else if $injector.has('$route')\n                        $injector.get('$route').reload()\n                    else\n                        $window.location.reload()\n\n            # the arguments are in this order: endpoint, id, child, id of child, query\n            get: (args...) ->\n\n                [restPath, query] = @processArguments(args)\n                query.subscribe ?= false\n\n                # up to date collection, this will be returned\n                collection = @createCollection(restPath, query)\n                collection.subscribe()\n\n            # register return values for the mocked get function\n            mocks: {}\n            spied: false\n            when: (args...) ->\n                [url, query, returnValue] = args\n                if not returnValue?\n                    [query, returnValue] = [{}, query]\n                if jasmine? and not @spied\n                    spyOn(@, 'get').and.callFake(@_mockGet)\n                    @spied = true\n\n                @mocks[url] ?= {}\n                @mocks[url][query] = returnValue\n\n            # register return values with the .when function\n            # when testing get will return the given values\n            _mockGet: (args...) ->\n                [url, query] = @processArguments(args)\n                queryWithoutSubscribe = angular.copy(query)\n                delete queryWithoutSubscribe.subscribe\n                returnValue = @mocks[url]?[query] or @mocks[url]?[queryWithoutSubscribe]\n                if not returnValue? then throw new Error(\"No return value for: #{url} (#{angular.toJson(query)})\")\n                collection = @createCollection(url, query)\n                collection.from(returnValue)\n                p = $q.resolve(collection)\n                p.getArray = -> collection\n                return p\n\n            # for easier testing\n            createCollection: (args...) ->\n                new Collection(args...)\n\n            processArguments: (args) ->\n                # keep defined arguments only\n                args.filter (e) -> e?\n                # get the query parameters\n                [..., last] = args\n                if angular.isObject(last)\n                    query = args.pop()\n                restPath = dataUtilsService.restPath(args)\n                return [restPath, query or {}]\n\n            control: (url, method, params = {}) ->\n                @jsonrpc ?= 1\n                restService.post url,\n                    id: @jsonrpc++\n                    jsonrpc: '2.0'\n                    method: method\n                    params: params\n\n            # generate functions for root endpoints\n            @generateEndpoints: (endpoints) ->\n                endpoints.forEach (e) =>\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    @::[\"get#{E}\"] = (args...) =>\n                        self.get(e, args...)\n\n            # opens a new accessor\n            open: (scope) ->\n                return new class DataAccessor\n                    collections = []\n                    constructor: ->\n                        @collections = collections\n                        # generate getXXX functions for root endpoints\n                        endpoints = Object.keys(SPECIFICATION).filter (e) -> SPECIFICATION[e].id?\n                        @constructor.generateEndpoints(endpoints)\n\n                        if scope? then @closeOnDestroy(scope)\n\n                    # calls unsubscribe on each root classes\n                    close: ->\n                        collections.forEach (c) -> c.unsubscribe?()\n\n                    # closes the group when the scope is destroyed\n                    closeOnDestroy: (scope) ->\n                        if not angular.isFunction(scope.$on)\n                            throw new Error(\"Parameter 'scope' doesn't have an $on function\")\n                        scope.$on '$destroy', => @close()\n\n                    # generate functions for root endpoints\n                    @generateEndpoints: (endpoints) ->\n                        endpoints.forEach (e) =>\n                            E = dataUtilsService.capitalize(e)\n                            @::[\"get#{E}\"] = (args...) =>\n                                last = args[args.length - 1]\n                                if angular.isObject(last)\n                                    last.subscribe ?= true\n                                else args.push(subscribe: true)\n                                p = self[\"get#{E}\"](args...)\n                                collections.push(p.getArray())\n                                return p\n","class DBStores extends Constant\n    constructor: ->\n        return {\n            paths: '&[path+query],path,query,lastActive'\n        }\n","class DataUtils extends Service\n    constructor: (SPECIFICATION) ->\n        return new class dataUtilsService\n            # capitalize first word\n            capitalize: (string) ->\n                string[0].toUpperCase() + string[1..].toLowerCase()\n\n            # returns the type of the endpoint\n            type: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # if the argument count is even, the last argument is an id\n                if a.length % 2 is 0 then a.pop()\n                a.pop()\n\n            # singularize the type name\n            singularType: (arg) ->\n                @type(arg).replace(/s$/, '')\n\n            socketPath: (arg) ->\n                a = @copyOrSplit(arg)\n                # if the argument count is even, the last argument is an id\n                stars = ['*']\n                # is it odd?\n                if a.length % 2 is 1 then stars.push('*')\n                a.concat(stars).join('/')\n\n            restPath: (arg) ->\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                a.join('/')\n\n            endpointPath: (arg) ->\n                # if the argument count is even, the last argument is an id\n                a = @copyOrSplit(arg)\n                a = a.filter (e) -> e isnt '*'\n                # is it even?\n                if a.length % 2 is 0 then a.pop()\n                a.join('/')\n\n            copyOrSplit: (arrayOrString) ->\n                if angular.isArray(arrayOrString)\n                    # return a copy\n                    arrayOrString[..]\n                else if angular.isString(arrayOrString)\n                    # split the string to get an array\n                    arrayOrString.split('/')\n                else\n                    throw new TypeError(\"Parameter 'arrayOrString' must be a array or a string, not #{typeof arrayOrString}\")\n\n            unWrap: (data, path) ->\n                type = @type(path)\n                type = SPECIFICATION[type]?.restField or type\n                data[type]\n\n            parse: (object) ->\n                for k, v of object\n                    try\n                        object[k] = angular.fromJson(v)\n                    catch error then # ignore\n                return object\n\n            numberOrString: (str = null) ->\n                # if already a number\n                if angular.isNumber(str) then return str\n                # else parse string to integer\n                number = parseInt str, 10\n                if !isNaN(number) then number else str\n\n            emailInString: (string) ->\n                if not angular.isString(string)\n                    throw new TypeError(\"Parameter 'string' must be a string, not #{typeof string}\")\n                emailRegex = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/\n                emailRegex.exec(string).pop() or ''\n","class IndexedDB extends Service\n    constructor: ($log, $injector, $q, $window, dataUtilsService, DBSTORES, SPECIFICATION) ->\n        return new class IndexedDBService\n            constructor: ->\n                @db = new $window.Dexie('BBCache')\n                stores = {}\n                angular.extend stores, @processSpecification(SPECIFICATION), DBSTORES\n                @db.version(1).stores(stores)\n\n                # global db error handler\n                @db.on 'error', (e) -> $log.error(e)\n                # open the database\n                @open()\n\n            open: ->\n                $q (resolve) =>\n                    @db.open()\n                    .catch (e) -> $log.error 'indexedDBService: open', e\n                    .finally -> resolve()\n\n            clear: ->\n                $q (resolve) =>\n                    @db.delete()\n                    .catch (e) -> $log.error 'indexedDBService: clear', e\n                    .finally => @open().then -> resolve()\n\n            get: (url, query = {}) ->\n                $q (resolve, reject) =>\n                    @processUrl(url).then ([tableName, q, id]) =>\n                        angular.extend query, q\n\n                        if not SPECIFICATION[tableName]?\n                            resolve([])\n                            return\n\n                        table = @db[tableName]\n                        @db.transaction 'r', table, =>\n\n                            # convert promise to $q implementation\n                            if id?\n                                table.get(id).then (e) => resolve dataUtilsService.parse(e)\n                                return\n\n                            table.toArray().then (array) =>\n                                array = array.map (e) => dataUtilsService.parse(e)\n\n                                # 1. filtering\n                                filters = []\n                                for fieldAndOperator, value of query\n                                    if ['field', 'limit', 'offset', 'order'].indexOf(fieldAndOperator) < 0\n                                        filters[fieldAndOperator] = value\n                                array = @filter(array, filters, tableName)\n\n                                # 2. sorting\n                                order = query?.order\n                                array = @sort(array, order)\n\n                                # 3. pagination\n                                offset = query?.offset\n                                limit = query?.limit\n                                array = @paginate(array, offset, limit)\n\n                                # TODO 4. properties\n                                property = query?.property\n                                array = @properties(array, property)\n\n                                # 5. fields\n                                fields = query?.field\n                                array = @fields(array, fields)\n\n                                resolve(array)\n\n            filter: (array, filters, tableName) ->\n                array.filter (v) ->\n                    for fieldAndOperator, value of filters\n                        if ['on', 'true', 'yes'].indexOf(value) > -1 then value = true\n                        else if ['off', 'false', 'no'].indexOf(value) > -1 then value = false\n                        [field, operator] = fieldAndOperator.split('__')\n                        switch operator\n                            when 'ne' then cmp = v[field] != value\n                            when 'lt' then cmp = v[field] <  value\n                            when 'le' then cmp = v[field] <= value\n                            when 'gt' then cmp = v[field] >  value\n                            when 'ge' then cmp = v[field] >= value\n                            else cmp = v[field] == value or\n                                (angular.isArray(v[field]) and value in v[field]) or\n                                # private fields added by the data service\n                                v[\"_#{field}\"] == value or\n                                (angular.isArray(v[\"_#{field}\"]) and value in v[\"_#{field}\"])\n                        if !cmp then return false\n                    return true\n\n            sort: (array, order) ->\n                compare = (property) ->\n                    if property[0] is '-'\n                        property = property[1..]\n                        reverse = true\n\n                    return (a, b) ->\n                        if reverse then [a, b] = [b, a]\n\n                        if a[property] < b[property] then -1\n                        else if a[property] > b[property] then 1\n                        else 0\n\n                copy = array[..]\n                if angular.isString(order)\n                    copy.sort compare(order)\n                else if angular.isArray(order)\n                    copy.sort (a, b) ->\n                        for o in order\n                            f = compare(o)(a, b)\n                            if f then return f\n                        return 0\n\n                return copy\n\n            paginate: (array, offset, limit) ->\n                offset ?= 0\n                if offset >= array.length\n                    return []\n\n                if not limit? or offset + limit > array.length\n                    end = array.length\n                else\n                    end = offset + limit - 1\n\n                return array[offset..end]\n\n            # TODO\n            properties: (array, properties) ->\n                return array\n\n            fields: (array, fields) ->\n                if not fields?\n                    return array\n\n                if not angular.isArray(fields) then fields = [fields]\n\n                for element in array\n                    for key of element\n                        if key not in fields\n                            delete element[key]\n\n                return array\n\n            processUrl: (url) ->\n                $q (resolve, reject) =>\n                    [root, id, path...] = url.split('/')\n                    specification = SPECIFICATION[root]\n                    query = {}\n                    if path.length == 0\n                        id = dataUtilsService.numberOrString(id)\n                        if angular.isString(id) and specification.identifier\n                            query[specification.identifier] = id\n                            id = null\n                        resolve [root, query, id]\n                        return\n\n                    pathString = path.join('/')\n                    match = specification.paths.filter (p) ->\n                        replaced = p\n                            .replace ///#{SPECIFICATION.FIELDTYPES.IDENTIFIER}\\:\\w+///g, '[a-zA-Z]+'\n                            .replace ///#{SPECIFICATION.FIELDTYPES.NUMBER}\\:\\w+///g, '\\\\d+'\n                        ///^#{replaced}$///.test(pathString)\n                    .pop()\n                    if not match?\n                        throw new Error(\"No child path (#{path.join('/')}) found for root (#{root})\")\n\n                    match = match.split('/')\n\n                    if path.length % 2 is 0\n                        fieldValue = dataUtilsService.numberOrString path.pop()\n                        [fieldType, fieldName] = match.pop().split(':')\n                    tableName = path.pop()\n                    match.pop()\n                    parentFieldValue = dataUtilsService.numberOrString(path.pop() or id)\n                    parentFieldName = match.pop()?.split(':').pop() or SPECIFICATION[root].id\n                    parentName = match.pop() or root\n                    parentId = SPECIFICATION[parentName].id\n\n                    if fieldName is SPECIFICATION[tableName]?.id\n                        id = fieldValue\n                        resolve [tableName, query, id]\n                    else\n                        if parentFieldName isnt parentId\n                            splitted = url.split('/')\n                            nextUrl = splitted[...(if splitted.length % 2 == 0 then -2 else -1)].join('/')\n                            @get(nextUrl).then (array) ->\n                                query[parentId] = array[0][parentId]\n                                if fieldName? then query[fieldName] = fieldValue\n                                resolve [tableName, query, null]\n                        else\n                            query[parentFieldName] = parentFieldValue\n                            if fieldName? then query[fieldName] = fieldValue\n                            resolve [tableName, query, null]\n\n            processSpecification: (specification) ->\n                # IndexedDB tables\n                stores = {}\n                for name, s of specification\n                    if angular.isArray(s.fields)\n                        a = s.fields[..]\n                        i = a.indexOf(s.id)\n                        if i > -1 then a[i] = \"&#{a[i]}\"\n                        else a.unshift('++id')\n                        stores[name] = a.join(',')\n                return stores\n","class Rest extends Service\n    constructor: ($http, $q, API) ->\n        return new class RestService\n            execute: (config) ->\n                $q (resolve, reject) =>\n                    $http(config)\n                    .success (response) ->\n                        try\n                            data = angular.fromJson(response)\n                            resolve(data)\n                        catch e\n                            reject(e)\n                    .error (reason) -> reject(reason)\n\n            get: (url, params = {}) ->\n                config =\n                    method: 'GET'\n                    url: @parse(API, url)\n                    params: params\n                    headers:\n                      'Accept': 'application/json'\n\n                @execute(config)\n\n            post: (url, data = {}) ->\n                config =\n                    method: 'POST'\n                    url: @parse(API, url)\n                    data: data\n                    headers:\n                        'Content-Type': 'application/json'\n\n                @execute(config)\n\n            parse: (args...) ->\n                args.join('/').replace(/\\/\\//, '/')\n","class Socket extends Service\n    constructor: ($log, $q, $location, $window, webSocketBackendService) ->\n        return new class SocketService\n            # waiting queue\n            queue: []\n            # deferred object for resolving response promises\n            # map of id: promise\n            deferred: {}\n            # the onMessage(key, message) function will be called to handle an update message\n            onMessage: null\n            # the onClose() function will be called to handle the close event\n            onClose: null\n\n            open: ->\n                @socket ?= @getWebSocket()\n                # flush queue on open\n                @socket.onopen = => @flush()\n\n                @socket.onmessage = (message) =>\n                    try\n                        data = angular.fromJson(message.data)\n                        $log.debug('WS message', data)\n\n                        # response message\n                        if data._id?\n                            [message, error, id, code] = [data.msg, data.error, data._id, data.code]\n                            if code is 200 then @deferred[id]?.resolve(message)\n                            else @deferred[id]?.reject(error)\n                        # update message\n                        else\n                            [key, message] = [data.k, data.m]\n                            @onMessage?(key, message)\n\n                    catch e\n                        $log.error(e)\n\n                @socket.onclose = =>\n                    @onClose?()\n\n            close: ->\n                @socket?.close()\n\n            send: (data) ->\n                # add _id to each message\n                id = @nextId()\n                data._id = id\n                @deferred[id] ?= $q.defer()\n\n                data = angular.toJson(data)\n                # ReconnectingWebSocket does not put status constants on instance\n                if @socket.readyState is (@socket.OPEN or 1)\n                    $log.debug 'WS send', angular.fromJson(data)\n                    @socket.send(data)\n                else\n                    # if the WebSocket is not open yet, add the data to the queue\n                    @queue.push(data)\n\n                # return promise, which will be resolved once a response message has the same id\n                return @deferred[id].promise\n\n            flush: ->\n                # send all the data waiting in the queue\n                while data = @queue.shift()\n                    $log.debug 'WS send', angular.fromJson(data)\n                    @socket.send(data)\n\n            nextId: ->\n                @id ?= 0\n                @id = if @id < 1000 then @id + 1 else 0\n                return @id\n\n            getRootPath: ->\n                return location.pathname\n\n            getUrl: ->\n                host = $location.host()\n                protocol = if $location.protocol() is 'https' then 'wss' else 'ws'\n                defaultport = if $location.protocol() is 'https' then 443 else 80\n                path = @getRootPath()\n                port = if $location.port() is defaultport then '' else ':' + $location.port()\n                return \"#{protocol}://#{host}#{port}#{path}ws\"\n\n            # this function will be mocked in the tests\n            getWebSocket: ->\n                url = @getUrl()\n                # if testing, use fake implementation\n                if jasmine?\n                    return webSocketBackendService.getWebSocket()\n                # use ReconnectingWebSocket if available\n                # TODO write own implementation?\n                if $window.ReconnectingWebSocket?\n                    return new $window.ReconnectingWebSocket(url)\n                return new $window.WebSocket(url)\n","class WebSocketBackend extends Service\n    self = null\n    constructor: ->\n        self = @\n        @webSocket = new MockWebSocket()\n\n    sendQueue: []\n    receiveQueue: []\n    send: (message) ->\n        data = {data: message}\n        @sendQueue.push(data)\n\n    flush: ->\n        while message = @sendQueue.shift()\n            @webSocket.onmessage(message)\n\n    getWebSocket: ->\n        return @webSocket\n\n    # mocked WebSocket\n    class MockWebSocket\n        OPEN: 1\n        send: (message) ->\n            self.receiveQueue.push(message)\n        close: -> @onclose?()\n","class Tabex extends Service\n    constructor: ($log, $window, $q, $timeout, socketService, restService, dataUtilsService, indexedDBService, SPECIFICATION) ->\n        return new class TabexService\n            CHANNELS =\n                MASTER: '!sys.master'\n                REFRESH: '!sys.channels.refresh'\n\n            ROLES =\n                MASTER: 'bb.role.master'\n                SLAVE: 'bb.role.slave'\n            _ROLES: ROLES # used in testing\n\n            EVENTS =\n                READY: 'bb.event.ready'\n                UPDATE: 'bb.event.update'\n                NEW: 'bb.event.new'\n            EVENTS: EVENTS\n\n            client: $window.tabex.client()\n\n            constructor: ->\n                # the message handler will be called on update messages\n                socketService.onMessage = @messageHandler\n                # the close handler will be called on close event\n                # we need to resend the startConsuming messages for\n                # every tracked channels\n                socketService.onClose = @closeHandler\n\n                @initialRoleDeferred = $q.defer()\n                @initialRole = @initialRoleDeferred.promise\n\n                @client.on CHANNELS.MASTER, @masterHandler\n                @client.on CHANNELS.REFRESH, @refreshHandler\n\n                $window.onunload = $window.onbeforeunload = (e) =>\n                    @activatePaths()\n                    return null\n\n            getSpecification: (type) -> SPECIFICATION[type]\n\n            masterHandler: (data) =>\n                # the master handles the data requests and the WebSocket connection\n                if data.node_id is data.master_id\n                    @role = ROLES.MASTER\n                    @initialRoleDeferred.resolve()\n                    socketService.open()\n                else\n                    @role = ROLES.SLAVE\n                    @initialRoleDeferred.resolve()\n                    # close the WebSocket connection if it's open\n                    socketService.close()\n\n            refreshHandler: (data) =>\n                # wait for the role to be determined\n                @initialRole.then =>\n                    if @role is ROLES.MASTER then @masterRefreshHandler(data)\n\n            debounceTimeout: 100\n            # path: [query]\n            trackedPaths: {}\n            # consumed paths\n            consuming: {}\n            masterRefreshHandler: (data) ->\n                # debounce logic\n                if @timeoutPromise? then $timeout.cancel(@timeoutPromise)\n                @timeoutPromise = $timeout =>\n                    @activatePaths().then =>\n\n                        # filter channels by system channels (starts with `!sys.`)\n                        channels = data.channels.filter (c) -> c.indexOf('!sys.') != 0\n\n                        paths = {}\n                        for channel in channels\n                            try\n                                r = angular.fromJson(channel)\n                                paths[r.path] ?= []\n                                paths[r.path].push(r.query)\n                            catch e\n                                $log.error('channel is not a JSON string', channel)\n                                return\n\n                        @startConsumingAll(paths).then =>\n                            # send stopConsuming messages after we get response\n                            # for startConsuming messages, therefore no update\n                            # will be lost\n                            for path of @consuming\n                                if path not of paths\n                                    # unsubscribe removed paths\n                                    @stopConsuming(path)\n                                    delete @consuming[path]\n\n                            @trackedPaths = paths\n                            # load all tracked path into cache\n                            @loadAll(paths)\n\n                , @debounceTimeout\n\n            messageHandler: (key, message) =>\n                # ../type/id/event\n                [type, id, event] = key.split('/')[-3..]\n                # translate the event type\n                if event is 'new' then event = EVENTS.NEW\n                else event = EVENTS.UPDATE\n                # update the object in the db\n                indexedDBService.db[type].put(message).then =>\n                    # emit the event\n                    for path of @trackedPaths\n                        if ///^#{path.replace(/\\*/g, '(\\\\w+|\\\\d+)')}$///.test(key)\n                            for query in @trackedPaths[path]\n                                @emit path, query, event\n\n            closeHandler: =>\n                paths = angular.copy(@trackedPaths)\n                @trackedPaths = {}\n                @startConsumingAll(paths)\n\n            loadAll: (paths) ->\n                db = indexedDBService.db\n                db.paths.toArray().then (dbPaths) =>\n                    for path, queries of paths\n                        for query in queries\n                            @load(path, query, dbPaths)\n\n            load: (path, query, dbPaths = []) ->\n                $q (resolve, reject) =>\n                    db = indexedDBService.db\n\n                    t = dataUtilsService.type(path)\n                    specification = @getSpecification(t)\n                    # test if cached and active\n                    for dbPath in dbPaths\n                        dbPath.query = angular.fromJson(dbPath.query)\n                        inCache =\n                            (dbPath.path is path and\n                            (angular.equals(dbPath.query, query) or angular.equals(dbPath.query, {}))) or\n                            (dbPath.path is t and angular.equals(dbPath.query, {}))\n                        elapsed = new Date() - new Date(dbPath.lastActive)\n                        active = elapsed < 2000 or specification.static == true\n\n                        if inCache and active\n                            resolve()\n                            return\n\n                    restPath = dataUtilsService.restPath(path)\n                    [parentName, parentId] = @getParent(restPath)\n                    parentIdName = SPECIFICATION[parentName]?.id\n                    if parentIdName? then parentIdName = \"_#{parentIdName}\"\n                    restService.get(restPath, query).then (data) =>\n                        type = dataUtilsService.type(restPath)\n                        data = dataUtilsService.unWrap(data, type)\n                        db.transaction 'rw', db[type], ->\n                            if not angular.isArray(data) then data = [data]\n                            data.forEach (i) ->\n                                put = (element) ->\n                                    for k, v of element\n                                        if angular.isObject(element[k])\n                                            element[k] = angular.toJson(v)\n                                    db[type].put(element)\n\n                                idName = SPECIFICATION[type]?.id\n                                id = i[idName]\n                                if id?\n                                    db[type].get(id).then (e) ->\n                                        e = dataUtilsService.parse(e)\n                                        for k, v of i then e[k] = v\n                                        if parentIdName?\n                                            e[parentIdName] ?= []\n                                            if parentId not in e[parentIdName]\n                                                e[parentIdName].push(parentId)\n                                        put(e)\n                                    .catch ->\n                                        if parentIdName? then i[parentIdName] = [parentId]\n                                        put(i)\n                                else\n                                    if parentIdName? then i[parentIdName] = [parentId]\n                                    put(i)\n\n                        .then ->\n                            db.transaction 'rw', db.paths, ->\n                                # cached path informations\n                                db.paths.put {\n                                    path: path\n                                    query: angular.toJson(query)\n                                }\n                            .then -> resolve()\n                            .catch (error) -> reject(error)\n                        .catch (error) -> reject(error)\n                    , (error) -> reject(error)\n\n                .then =>\n                    @emit path, query, EVENTS.READY\n                , (error) =>\n                    $log.error(error)\n\n            getParent: (restPath) ->\n                path = restPath.split('/')\n                if path % 2 == 0 then path.pop()\n                path.pop()\n                id = dataUtilsService.numberOrString path.pop()\n                name = path.pop()\n                return [name, id]\n\n            activatePaths: ->\n                paths = angular.copy(@trackedPaths)\n                db = indexedDBService.db\n                db.transaction 'rw', db.paths, =>\n                    now = (new Date()).toString()\n                    for path, queries of paths\n                        for query in queries\n                            db.paths\n                            .where('[path+query]').equals([path,angular.toJson(query)])\n                            .modify('lastActive': now)\n\n            on: (options..., listener) ->\n                [path, query] = options\n                query = angular.copy(query) or {}\n                subscribe = query.subscribe\n                delete query.subscribe\n                # if subscribe is false, we just load the data\n                if subscribe == false\n                    indexedDBService.db.paths.toArray().then (dbPaths) =>\n                        @load(path, query, dbPaths).then -> listener(EVENTS.READY)\n                    return\n                # if subscribe is true, we subscribe on events\n                channel =\n                    path: path\n                    query: query\n                @client.on angular.toJson(channel), listener\n\n            off: (options..., listener) ->\n                [path, query] = options\n                query = angular.copy(query) or {}\n                delete query.subscribe\n\n                channel =\n                    path: path\n                    query: query\n                @client.off angular.toJson(channel), listener\n\n            emit: (options..., message) ->\n                [path, query] = options\n                channel =\n                    path: path\n                    query: query or {}\n                @client.emit angular.toJson(channel), message, true\n\n            startConsuming: (path) ->\n                socketService.send\n                    cmd: 'startConsuming'\n                    path: path\n\n            stopConsuming: (path) ->\n                socketService.send\n                    cmd: 'stopConsuming'\n                    path: path\n\n            startConsumingAll: (paths) ->\n                if angular.isArray(paths)\n                    socketPaths = paths[...]\n                else if angular.isObject(paths)\n                    socketPaths = Object.keys(paths)\n                else throw new Error('Parameter paths is not an object or an array')\n\n                # filter socket paths that are included in another paths\n                pathsToRemove = []\n                for p, i in socketPaths\n                    r = ///^#{p.replace(/\\*/g, '(\\\\w+|\\\\d+|\\\\*)')}$///\n                    for q, j in socketPaths\n                        if j != i and r.test(q) then pathsToRemove.push(q)\n                for p in pathsToRemove\n                    socketPaths.splice socketPaths.indexOf(p), 1\n\n                promises = []\n                for path in socketPaths\n                    if path not of @trackedPaths\n                        @consuming[path] = true\n                        promises.push @startConsuming(path)\n\n                return $q.all(promises)\n\n            mergePaths: (dest, src) ->\n                for path, queries of src\n                    dest[path] ?= []\n                    for query in queries\n                        if dest[path].filter (e) ->\n                            angular.equals(e, query)\n                        .length == 0\n                            dest[path].push(query)\n","class Collection extends Factory\n    constructor: ($q, $injector, $log, dataUtilsService, tabexService, indexedDBService, SPECIFICATION) ->\n        return class CollectionInstance extends Array\n            constructor: (restPath, query = {}) ->\n                @getRestPath = -> restPath\n                @getQuery = -> query\n                @getSocketPath = -> dataUtilsService.socketPath(restPath)\n                @getType = -> dataUtilsService.type(restPath)\n                @getEndpoint = -> dataUtilsService.endpointPath(restPath)\n                @getSpecification = -> SPECIFICATION[@getType()]\n                Wrapper = $injector.get('Wrapper')\n                @getWrapper = -> Wrapper\n\n                ready = $q.defer()\n                @getReadyDeferred = -> ready\n                @getReadyPromise = -> ready.promise\n\n            subscribe: ->\n                tabexService.on @getSocketPath(), @getQuery(), @listener\n                promise = @getReadyPromise()\n                promise.getArray = => return this\n                return promise\n\n            unsubscribe: ->\n                @forEach (e) -> e?.unsubscribe?()\n                tabexService.off @getSocketPath(), @getQuery(), @listener\n\n            listener: (event) =>\n                if event is tabexService.EVENTS.READY and @length != 0 then return\n                query = angular.copy(@getQuery())\n                delete query.subscribe\n                indexedDBService.get(@getRestPath(), query).then (data) =>\n                    if not angular.isArray(data) then data = [data]\n                    switch event\n                        when tabexService.EVENTS.READY then @readyHandler(data)\n                        when tabexService.EVENTS.UPDATE then @updateHandler(data)\n                        when tabexService.EVENTS.NEW then @newHandler(data)\n                        else $log.error('Unhandled tabex event', event)\n\n            readyHandler: (data) ->\n                @from(data)\n                @getReadyDeferred()?.resolve(@)\n\n            # add new elements and remove old ones\n            newHandler: (data) ->\n                id = @getSpecification().id\n                ids =\n                    new: data.map (e) -> e[id]\n                    old: @map (e) -> e[id]\n\n                # add new\n                data.forEach (e) => if e[id] not in ids.old then @add(e)\n\n                # delete old\n                @forEach (e) => if e[id] not in ids.new then @delete(e)\n\n            updateHandler: (data) ->\n                @newHandler(data)\n\n                id = @getSpecification().id\n                for e in data\n                    @forEach (i) -> if e[id] == i[id] then i.update(e)\n\n            from: (data) ->\n                # add items one by one\n                @add(i) for i in data\n\n            add: (element) ->\n                Wrapper = @getWrapper()\n                instance = new Wrapper(element, @getEndpoint(), @getQuery().subscribe)\n                @push(instance)\n\n            clear: ->\n                @pop() while @length > 0\n\n            delete: (element) ->\n                index = @indexOf(element)\n                if index > -1 then @splice(index, 1)\n","class Wrapper extends Factory\n    constructor: ($log, dataService, dataUtilsService, tabexService, SPECIFICATION) ->\n        return class WrapperInstance\n            constructor: (object, endpoint, @_subscribe) ->\n                if not angular.isString(endpoint)\n                    throw new TypeError(\"Parameter 'endpoint' must be a string, not #{typeof endpoint}\")\n                @_endpoint = endpoint\n\n                # add object fields to the instance\n                @update(object)\n\n                # generate getXXX, and loadXXX functions\n                endpoints = Object.keys(SPECIFICATION)\n                @constructor.generateFunctions(endpoints)\n\n            update: (o) ->\n                angular.merge(@, o)\n\n            get: (args...) ->\n                [root, id, path...] = @_endpoint.split('/')\n                [options..., last] = args\n                if angular.isObject(last)\n                    pathString = path.concat('*', options).join('/')\n                    if @_subscribe? then args[args.length - 1].subscribe ?= @_subscribe\n                else\n                    pathString = path.concat('*', args).join('/')\n                    if @_subscribe? then args.push(subscribe: @_subscribe)\n                if path.length == 0\n                    return dataService.get(@_endpoint, @getId(), args...)\n\n                specification = SPECIFICATION[root]\n                match = specification.paths.filter (p) ->\n                    replaced = p\n                        .replace ///\\w+\\:\\w+///g, '(\\\\*|\\\\w+|\\\\d+)'\n                    ///^#{replaced}$///.test(pathString)\n                .pop()\n                if not match?\n                    parameter = @getId()\n                else\n                    # second last element\n                    for e in match.split('/')[...-1] by -1\n                        if e.indexOf(':') > -1\n                            [fieldType, fieldName] = e.split(':')\n                            parameter = @[fieldName]\n                            break\n\n                dataService.get(@_endpoint, parameter, args...)\n\n            control: (method, params) ->\n                dataService.control(\"#{@_endpoint}/#{@getIdentifier() or @getId()}\", method, params)\n\n            # generate endpoint functions for the class\n            @generateFunctions: (endpoints) ->\n                endpoints.forEach (e) =>\n                    if e == e.toUpperCase() then return\n                    # capitalize endpoint names\n                    E = dataUtilsService.capitalize(e)\n                    # adds getXXX functions to the prototype\n                    @::[\"get#{E}\"] ?= (args...) ->\n                        return @get(e, args...)\n                    # adds loadXXX functions to the prototype\n                    @::[\"load#{E}\"] ?= (args...) ->\n                        p = @get(e, args...)\n                        @[e] = p.getArray()\n                        return p\n\n            getId: ->\n                @[@classId()]\n\n            getIdentifier: ->\n                @[@classIdentifier()]\n\n            classId: ->\n                SPECIFICATION[dataUtilsService.type(@_endpoint)].id\n\n            classIdentifier: ->\n                SPECIFICATION[dataUtilsService.type(@_endpoint)].identifier\n\n            unsubscribe: ->\n                e?.unsubscribe?() for _, e of this\n"],"sourceRoot":"/source/"}